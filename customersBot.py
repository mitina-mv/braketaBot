import logging
import telebot
from telebot import types
import os
import sqlite3
from datetime import datetime, timedelta
import random
import schedule
import threading
import time

token = os.environ.get("TOKEN_CUSTOMERS")
db_path = 'braketaDB.db'

bot = telebot.TeleBot(token)

user = {}

status_bot = ''

last_checked_timestamp = time.time() - 120

def get_user_from_db(telegram_id):
    global user

    with sqlite3.connect(db_path) as db:
        cursor = db.cursor()
        cursor.execute('SELECT * FROM Customers WHERE telegram_id = ?', (telegram_id,))
        user_data = cursor.fetchone()
    
    return user_data

@bot.message_handler(commands=['start'])
def start_message(message):
    global status_bot
    global user

    telegram_id = message.from_user.id
    user_data = get_user_from_db(telegram_id)

    if user_data:
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {user_data[1]} ‚úåÔ∏è  \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É!")
        status_bot = 'start'
        user = user_data
        send_menu(message.chat.id)
    else:
        status_bot = 'register'
        contact_button(message.chat.id)

def contact_button(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    markup.add(button)
    bot.send_message(chat_id, "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)

def send_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    history_button = types.KeyboardButton("üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
    orders_button = types.KeyboardButton("üì¶ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
    help_button = types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")

    markup.add(history_button)
    markup.add(orders_button)
    markup.add(help_button)

    bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    contact = message.contact
    phone_number = contact.phone_number

    with sqlite3.connect(db_path) as db:        
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = db.cursor()
        cursor.execute('INSERT INTO Customers (phone, telegram_id) VALUES (?, ?)', (phone_number, message.chat.id,))
        db.commit()

    status_bot = 'register'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è: ")
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /history
@bot.message_handler(commands=['history'])
@bot.message_handler(func=lambda message: message.text == 'üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤')
def history_command(message):
    with sqlite3.connect(db_path) as db:        
        # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = get_user_from_db(message.chat.id)[0]

        cursor = db.cursor()
        cursor.execute("""SELECT  
            Orders.id AS order_id,
            Orders.name AS order_name,
            Orders.order_date AS create_date,
            Orders.planned_delivery_date AS delivery_date,
            Statuses.name AS status_name,
            Managers.full_name AS manager_name
        FROM Orders
        JOIN Statuses ON Orders.status_id = Statuses.id
        JOIN Managers ON Orders.manager_id = Managers.id
        WHERE Orders.customer_id = ?
        ORDER BY Orders.order_date DESC
                       
        """, (user_id,))
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        results = cursor.fetchall()

        if results == []:
            bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤, –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        orders_str = ''
        count = 1
        for row in results:
            orders_str += f"""\n\n{count}. *–ó–∞–∫–∞–∑ ‚Ññ {row[0]} \"{row[1]}\" *\n 
    –°—Ç–∞—Ç—É—Å: {row[4]}
    –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {row[2]}
    –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {row[3]} 
    –ú–µ–Ω–µ–¥–∂–µ—Ä: {row[5]}"""

            count += 1
        
    bot.send_message(message.chat.id, f"–ò—Å—Ç–æ—Ä–∏—è –í–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:{orders_str}", parse_mode="Markdown")
    send_menu(message.chat.id)
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /orders
@bot.message_handler(commands=['orders'])
@bot.message_handler(func=lambda message: message.text == 'üì¶ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã')
def orders_command(message):
    global user

    with sqlite3.connect(db_path) as db:
        cursor = db.cursor()
        # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = get_user_from_db(message.chat.id)[0]

        cursor.execute("""SELECT  
            Orders.id AS order_id,
            Orders.name AS order_name
        FROM Orders
        WHERE Orders.customer_id = ?
        AND Orders.status_id != 7
        AND Orders.status_id != 8
        AND Orders.status_id != 9
        ORDER BY Orders.order_date DESC          
        """, (user_id,))
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        results = cursor.fetchall()

    if results:
        markup = types.InlineKeyboardMarkup(row_width=2)
        for row in results:
            markup.add(types.InlineKeyboardButton(f"–ó–∞–∫–∞–∑ ‚Ññ {row[0]}", callback_data=f"order_{row[0]}"))
        
        bot.send_message(message.chat.id, "–í–∞—à–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã: \n", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ú—ã –Ω–µ –Ω–∞—à–ª–∏ —É –í–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        send_menu(message.chat.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
@bot.message_handler(func=lambda message: message.text == '‚ùì –ü–æ–º–æ—â—å')
def help_command(message):
    bot.send_message(message.chat.id, """*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*\n
/start - –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–¥–µ—Ç –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/history - –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
/orders - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∑–∞–∫–∞–∑—É.
""", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±–µ–∫–∞
@bot.callback_query_handler(func=lambda call:True)
def callback_query(call):
    req = call.data.split('_')

    if req[0] == 'order':
        # –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ –µ–≥–æ id
        with sqlite3.connect(db_path) as db:
            cursor = db.cursor()
            cursor.execute("""SELECT 
                Orders.id AS order_id,
                Orders.name AS order_name,
                Orders.order_date,
                Orders.planned_delivery_date,
                Statuses.name AS status_name,
                Managers.full_name AS manager_name,
                OrderItems.quantity,
                Items.units,
                Items.name AS item_name
            FROM Orders
            JOIN Statuses ON Orders.status_id = Statuses.id
            JOIN Managers ON Orders.manager_id = Managers.id
            JOIN OrderItems ON Orders.id = OrderItems.order_id
            JOIN Items ON OrderItems.item_id = Items.id
            WHERE Orders.id = ?;          
            """, (req[1],))
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
            result = cursor.fetchall()

        if not result:
            bot.send_message(call.message.chat.id, "–ú—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –í–∞—à –∑–∞–∫–∞–∑. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–º–ø–∞–Ω–∏–µ–π.")
            return
        
        order_details = {
            'order_id': result[0][0],
            'order_name': result[0][1],
            'order_date': result[0][2],
            'planned_delivery_date': result[0][3],
            'status_name': result[0][4],
            'manager_name': result[0][5],
            'order_items': []
        }

        for row in result:
            print(row)
            order_items_details = {'item_name': row[8], 'quantity': row[6], 'units': row[7]}
            order_details['order_items'].append(order_items_details)

        output = (
            f"*–ó–∞–∫–∞–∑ ‚Ññ {order_details['order_id']} \"{order_details['order_name']}\" *\n\n"
            f"–°—Ç–∞—Ç—É—Å: {order_details['status_name']}\n"
            f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order_details['order_date']}\n"
            f"–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order_details['planned_delivery_date']}\n"
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {order_details['manager_name']}\n\n"
            "*–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n"
        )

        count = 1;
        for item in order_details['order_items']:
            output += f"{count}. {item['item_name']} ({item['quantity']} {item['units']})\n"
            count += 1

        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{row[0]}"))

        bot.send_message(call.message.chat.id, output, parse_mode="Markdown", reply_markup=markup)

    elif req[0] == 'cancel':
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ –µ–≥–æ id
        with sqlite3.connect(db_path) as db:
            cursor = db.cursor()
            # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π id —Å—Ç–∞—Ç—É—Å–∞
            cursor.execute("""SELECT  
                Orders.status_id
            FROM Orders
            WHERE Orders.id = ?                        
            """, (req[1],))

            order_status = cursor.fetchone()

            if order_status and (order_status[0] == 7 or order_status[0] == 8 or order_status[0] == 9):
                bot.send_message(call.message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ!")
                return

            # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            cursor.execute("UPDATE Orders SET status_id = 9, timestamp_update = ? WHERE id = ?", (time.time() + 30, req[1],))
            db.commit()

        bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∑–∞–∫–∞–∑–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")
        send_menu(call.message.chat.id)

     

# –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_full_name(message):
    global status_bot
    global user
    
    if status_bot == 'register':
        full_name = message.text
        
        with sqlite3.connect(db_path) as db:
            # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = get_user_from_db(message.chat.id)[0]

            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = db.cursor()
            cursor.execute('UPDATE Customers SET full_name = ? WHERE id = ?', (full_name, user_id,))
            db.commit()

            current_date = datetime.now().date()
            planned_delivery_date = current_date + timedelta(days=10)

            cursor.execute('INSERT INTO Orders (name, status_id, order_date, planned_delivery_date, manager_id, customer_id) VALUES (?, ?, ?, ?, ?, ?)', ('–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑', 1, current_date, planned_delivery_date, 1, user_id,))
            db.commit()

            # —Å–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑–µ
            new_order_id = cursor.lastrowid
            for i in range(random.randint(3, 6)):
                cursor.execute('INSERT INTO OrderItems (order_id, item_id, quantity) VALUES (?, ?, ?)', (new_order_id, random.randint(1, 17), random.randint(15, 1000),))
                db.commit()

        bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ, {full_name}! –ú—ã —Å–æ–∑–¥–∞–ª–∏ –≤–∞–º –¥–µ–º–æ-–∑–∞–∫–∞–∑.")
        status_bot = 'start'

        send_menu(message.chat.id)

    elif status_bot == 'start':
        bot.send_message(message.chat.id, f"–ß—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞–µ–º")
    else:
        telegram_id = message.from_user.id
        user_data = get_user_from_db(telegram_id)
        if user_data:
            user = user_data
        bot.send_message(message.chat.id, f"–º—ã –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∏")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def check_database_changes():
    global bot
    global last_checked_timestamp

    with sqlite3.connect('braketaDB.db') as connection:
        cursor = connection.cursor()
        cursor.execute('''
            SELECT
                Orders.id AS order_id,
                Orders.name AS order_name,
                Statuses.name AS status_name,
                Customers.telegram_id as telega
            FROM Orders
            JOIN Statuses ON Orders.status_id = Statuses.id
            JOIN Customers ON Orders.customer_id = Customers.id
            WHERE Orders.timestamp_update > ?
            AND Orders.status_id != 1
            ORDER BY Orders.order_date DESC
        ''', (last_checked_timestamp,))

        results = cursor.fetchall()

        for row in results:
            order_id = row[0]
            order_name = row[1]
            status_name = row[2]
            telega = row[3]

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            bot.send_message(telega, f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} \"{order_name}\". –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status_name}")

        last_checked_timestamp = time.time()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–¥
schedule.every(1).minutes.do(check_database_changes)

# –°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
background_thread = threading.Thread(target=run_schedule)
background_thread.start()

while True:
    try:
        bot.polling(none_stop=True)
        time.sleep(1)
    except Exception as e:
        logging.error(e)
        time.sleep(5)

