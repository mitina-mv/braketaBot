import logging
import telebot
from telebot import types
import os
import sqlite3
from datetime import datetime, timedelta

token = os.environ.get("TOKEN_CUSTOMERS")
db_path = 'braketaDB.db'

bot = telebot.TeleBot(token)

user = {}

status_bot = ''

def get_user_from_db(telegram_id):
    global user

    with sqlite3.connect(db_path) as db:
        cursor = db.cursor()
        cursor.execute('SELECT * FROM Customers WHERE telegram_id = ?', (telegram_id,))
        user_data = cursor.fetchone()
        user['telegram_id'] = telegram_id
    
    return user_data

@bot.message_handler(commands=['start'])
def start_message(message):
    global status_bot
    global user

    telegram_id = message.from_user.id
    user_data = get_user_from_db(telegram_id)

    if user_data:
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {user_data[1]} ‚úåÔ∏è  \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É!")
        status_bot = 'start'
        user = user_data
        send_menu(message.chat.id)
    else:
        status_bot = 'register'
        contact_button(message.chat.id)

def contact_button(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    markup.add(button)
    bot.send_message(chat_id, "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)

def send_menu(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    history_button = types.InlineKeyboardButton("üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data='history')
    orders_button = types.InlineKeyboardButton("üì¶ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data='orders')
    help_button = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')

    markup.add(history_button, orders_button, help_button)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=markup)

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    contact = message.contact
    phone_number = contact.phone_number
    user['phone_number'] = phone_number
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è: ")
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /history
@bot.message_handler(commands=['history'])
def history_command(message):
    global user

    with sqlite3.connect(db_path) as db:
        cursor = db.cursor()
        cursor.execute('SELECT * FROM Orders WHERE customer_id = ?', (user[0],))
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        results = cursor.fetchall()

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        orders_str = ''
        count = 1
        managers = {}
        statuses = {}
        for row in results:
            # –∑–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –µ—Å–ª–∏ –Ω–µ —É–∑–Ω–∞–ª–∏
            if row[5] not in managers:
                cursor = db.cursor()
                cursor.execute('SELECT * FROM Managers WHERE id = ?', (row[5],))
                tmp = cursor.fetchone()
                if tmp:
                    managers[row[5]] = tmp[1]
                else:
                    bot.send_message(message.chat.id, '–í —Ö–æ–¥–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±–µ—â–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.')
                    return
                
            # –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
            if row[2] not in statuses:
                cursor = db.cursor()
                cursor.execute('SELECT * FROM Statuses WHERE id = ?', (row[2],))
                tmp = cursor.fetchone()
                if tmp:
                    statuses[row[2]] = tmp[1]
                else:
                    bot.send_message(message.chat.id, '–í —Ö–æ–¥–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±–µ—â–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.')
                    return

            orders_str += f"""{count}. *–ó–∞–∫–∞–∑ ‚Ññ {row[0]} \"{row[1]}\" *\n 
–°—Ç–∞—Ç—É—Å: {statuses[row[2]]}
–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {row[3]}
–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {row[4]} 
–ú–µ–Ω–µ–¥–∂–µ—Ä: {managers[row[5]]}"""

            ++count
        
        bot.send_message(message.chat.id, f"–í—Å–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n{orders_str}", parse_mode="Markdown")
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /orders
@bot.message_handler(commands=['orders'])
def orders_command(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö...")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, "–ü–æ–º–æ—â—å: –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±–µ–∫–∞
@bot.callback_query_handler(func=lambda call:True)
def callback_query(call):
    global user

    req = call.data.split('_')

    # TODO –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if user == {}:
        user_data = get_user_from_db(call.message.from_user.id)
        print(user_data)
        if user_data:
            user = user_data
    
    if req[0] == 'history':
        history_command(call.message)
    
    elif req[0] == 'orders':
        orders_command(call.message)
    
    elif req[0] == 'help':
        help_command(call.message)

# –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_full_name(message):
    global status_bot
    global user
    
    if status_bot == 'register':
        full_name = message.text
        user['full_name'] = full_name
        
        with sqlite3.connect(db_path) as db:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = db.cursor()
            cursor.execute('INSERT INTO Customers (full_name, phone, telegram_id) VALUES (?, ?, ?)', (user['full_name'], user['phone_number'], user['telegram_id'],))
            db.commit()

            # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
            cursor = db.cursor()
            cursor.execute('SELECT * FROM Customers WHERE telegram_id = ?', (user['telegram_id'],))
            user = cursor.fetchone()
            print(user)

            # —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ –∑–∞–∫–∞–∑
            current_date = datetime.now().date()
            planned_delivery_date = current_date + timedelta(days=10)

            cursor.execute('INSERT INTO Orders (name, status_id, order_date, planned_delivery_date, manager_id, customer_id) VALUES (?, ?, ?, ?, ?, ?)', ('–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑', 1, current_date, planned_delivery_date, 1, user[0],))
            db.commit()

        bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ, {full_name}! –ú—ã —Å–æ–∑–¥–∞–ª–∏ –≤–∞–º –¥–µ–º–æ-–∑–∞–∫–∞–∑.")
        status_bot = 'start'

        send_menu(message.chat.id)

    elif status_bot == 'start':
        bot.send_message(message.chat.id, f"–ß—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞–µ–º")
    else:
        telegram_id = message.from_user.id
        user_data = get_user_from_db(telegram_id)
        if user_data:
            user = user_data
        bot.send_message(message.chat.id, f"–º—ã –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª–∏")


bot.polling(none_stop=True)